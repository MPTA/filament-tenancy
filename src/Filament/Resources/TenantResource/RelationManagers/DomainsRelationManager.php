<?php

namespace TomatoPHP\FilamentTenancy\Filament\Resources\TenantResource\RelationManagers;

use Filament\Forms;
use Filament\Resources\RelationManagers\RelationManager;
use Filament\Schemas\Schema;
use Filament\Tables;
use Filament\Actions\BulkActionGroup;
use Filament\Actions\CreateAction;
use Filament\Actions\DeleteAction;
use Filament\Actions\DeleteBulkAction;
use Filament\Actions\EditAction;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Str;

class DomainsRelationManager extends RelationManager
{
    protected static string $relationship = 'domains';

    public static function getTitle(Model $ownerRecord, string $pageClass): string
    {
        return trans('filament-tenancy::messages.domains.title');
    }

    protected static function getModelLabel(): ?string
    {
        return trans('filament-tenancy::messages.domains.single'); // TODO: Change the autogenerated stub
    }

    public function form(Schema $schema): Schema
    {
        return $schema
            ->schema([
                Forms\Components\TextInput::make('domain')
                    ->required()
                    ->label(trans('filament-tenancy::messages.domains.columns.domain'))
                    ->prefix(request()->getScheme()."://")
                    ->suffix(".".request()->getHost())
                    ->maxLength(255),
            ]);
    }

    public function table(Table $table): Table
    {
        return $table
            ->recordTitleAttribute('domain')
            ->columns([
                Tables\Columns\TextColumn::make('domain')
                    ->label(trans('filament-tenancy::messages.domains.columns.domain')),
                Tables\Columns\TextColumn::make('full-domain')
                    ->label(trans('filament-tenancy::messages.domains.columns.full'))
                    ->getStateUsing(fn($record) => Str::of($record->domain)->append('.')->append(request()->getHost()))
            ])
            ->filters([
                //
            ])
            ->headerActions([
                CreateAction::make(),
            ])
            ->actions([
                EditAction::make(),
                DeleteAction::make(),
            ])
            ->bulkActions([
                BulkActionGroup::make([
                    DeleteBulkAction::make(),
                ]),
            ]);
    }
}
